#!/usr/bin/env python3

# Copyright 2017 Yunchih Chen <yunchih@csie.ntu.edu.tw>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
#     IN THE SOFTWARE.

import sys, logging, argparse
from resrc.utils import open_file, quit
from resrc.parse import parse_cmd, parse_config
from resrc.systemd import UsersResourceManager

CONFIG_FILE  = "logind-hook.conf"
DESCRIPTION  = "Limit total system resources available to a user within all her sessions."
VERSION      = 1.1
EXAMPLE_USAGE = """
Note:
    Please see `man systemd.cgroups(5)` for a list of available resource types.

Example:
    Apply the `MemoryLimit` Systemd resource rule to the user `john`:
        $ %(prog)s --users john --rules MemoryLimit=53687091200

    Apply the `MemoryLimit` Systemd resource to all users:
        $ %(prog)s --all-users --rules MemoryLimit=53687091200

"""

def _parse_config(fn_config):

    if not fn_config:
        return []

    f = open_file(fn_config)
    cfg = parse_config(f)
    f.close()
    return cfg

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description=DESCRIPTION,
            formatter_class=argparse.RawTextHelpFormatter,
            epilog=EXAMPLE_USAGE)
    parser.add_argument("--config", "-c", action="store", default="",
            help="Using a configuration file as input")
    parser.add_argument("--users", "-u", nargs="+", action="store", default=[],
            help="(Optional) A list of users to be constrained")
    parser.add_argument("--groups", "-g", nargs="+", action="store", default=[],
            help="(Optional) A list of groups to be constrained")
    parser.add_argument("--rules", "-r", action="store", default="",
            help="(Required) A comma-seperated list of rules to be applied")
    parser.add_argument("--apply-existing", "-e", dest="apply_existing", action="store_true",
            help="(Optional) Apply the constraints to all *existing* users")
    parser.add_argument("--verbose", action="store_true",
            help="Show verbose output")
    parser.add_argument("--dry", action="store_true",
            help="Run without actually applying rules")
    parser.add_argument("--version", "-v", action="version", version="%(prog)s " + str(VERSION))

    args = parser.parse_args()
    level = logging.DEBUG if args.verbose else logging.ERROR
    logging.basicConfig(stream=sys.stderr, level=level, format='%(levelname)s: %(message)s')
    logging.info("Systemd resource manager started")

    rules = _parse_config(args.config)
    rules = rules + parse_cmd(args.users, args.groups, args.rules)

    manager = UsersResourceManager(rules, args.dry, args.apply_existing)
    manager.monitor_new_user()
    manager.run()

